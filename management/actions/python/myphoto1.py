import cv2
import insightface
import numpy as np
import os
import json
import sys
import traceback 

def process_face_recognition(data):
    """
    ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å PHP ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏π‡πâ‡∏à‡∏≥‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö Batch
    :param data: dict ‡∏ó‡∏µ‡πà‡∏°‡∏µ all_students_ref_paths (dict), group_path (str), group_photo_id (int)
    :return: dict ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    """
    
    # üí° ‡πÉ‡∏ä‡πâ dict ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö embeddings ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô: student_id => [embedding1, embedding2, ...]
    student_embeddings = {} 
    
    debug_info = {
        "group_path": data.get('group_path', 'N/A'),
        "group_photo_id": data.get('group_photo_id', 'N/A'),
        "total_students_processed": 0,
        "total_embeddings_created": 0,
        "load_ref_error": None
    }
    
    try:
        app = insightface.app.FaceAnalysis(name='buffalo_l')
        app.prepare(ctx_id=-1, det_size=(640, 640)) 

        all_students_ref_paths = data.get('all_students_ref_paths', {})
        group_path = data.get('group_path', None)
        threshold = 0.45 
        found_student_ids = [] # IDs ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ
        
        # ----------------------------------------------------
        # 1. ‡πÇ‡∏´‡∏•‡∏î reference ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á embedding
        # ----------------------------------------------------
        
        for student_id_str, ref_paths in all_students_ref_paths.items():
            student_id = int(student_id_str)
            student_embeddings[student_id] = []
            debug_info["total_students_processed"] += 1

            for path in ref_paths:
                if not os.path.exists(path):
                    continue 

                img = cv2.imread(path, cv2.IMREAD_COLOR) 
                if img is None:
                    continue

                faces = app.get(img)
                
                if len(faces) == 0:
                    continue

                # ‡πÉ‡∏ä‡πâ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
                face = faces[0]
                embedding = face.embedding / np.linalg.norm(face.embedding) 
                student_embeddings[student_id].append(embedding)
                debug_info["total_embeddings_created"] += 1
        
        if debug_info["total_embeddings_created"] == 0:
             return {
                "status": "error", 
                "message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô", 
                "debug": debug_info
            } 

        # ----------------------------------------------------
        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        # ----------------------------------------------------
        
        if not group_path or not os.path.exists(group_path):
            return {
                "status": "error", 
                "message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö", 
                "debug": debug_info
            }
            
        group_img = cv2.imread(group_path, cv2.IMREAD_COLOR)
        if group_img is None:
            return {
                "status": "error", 
                "message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ (Corrupt or Invalid Format)", 
                "debug": debug_info
            }
        
        faces_group = app.get(group_img)
        
        if len(faces_group) == 0:
            return {
                "status": "success", 
                "found_student_ids": [],
                "message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°", 
                "debug": debug_info
            }

        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°
        for face_in_group in faces_group:
            emb_group = face_in_group.embedding / np.linalg.norm(face_in_group.embedding)
            
            # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö similarity
            for student_id, ref_embeddings in student_embeddings.items():
                if student_id in found_student_ids:
                    continue # ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå)

                best_sim = -1
                # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏£‡∏π‡∏õ)
                for ref_emb in ref_embeddings:
                    sim = np.dot(ref_emb, emb_group)
                    if sim > best_sim:
                        best_sim = sim
                
                if best_sim > threshold:
                    found_student_ids.append(student_id)
                    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
                    # (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏Ñ‡πà‡∏ß‡πà‡∏≤ "‡∏°‡∏µ" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÑ‡∏°‡πà‡∏°‡∏µ" ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ)
                    # ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡πÉ‡∏´‡πâ‡∏•‡∏ö break ‡∏≠‡∏≠‡∏Å
                    break 

        return {
            "status": "success",
            "found_student_ids": found_student_ids, # ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏Ñ‡πà ID ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            "message": f"‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏û‡∏ö {len(found_student_ids)} ‡∏Ñ‡∏ô",
            "debug": debug_info
        }

    except Exception as e:
        debug_info["load_ref_error"] = str(e) 
        return {
            "status": "error", 
            "message": f"Python Error: {str(e)}", 
            "traceback": traceback.format_exc(),
            "debug": debug_info
        }

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(json.dumps({"status": "error", "message": "No JSON argument provided", "raw_input": sys.argv}))
        sys.exit(1)

    try:
        input_data = json.loads(sys.argv[1])
    except json.JSONDecodeError as e:
        print(json.dumps({
            "status": "error", 
            "message": f"Invalid JSON input: {str(e)}", 
            "raw_input": sys.argv[1]
        }))
        sys.exit(1)

    result = process_face_recognition(input_data)
    print(json.dumps(result))